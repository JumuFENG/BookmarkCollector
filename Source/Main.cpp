/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic startup code for a Juce application.

  ==============================================================================
*/

#include "../JuceLibraryCode/JuceHeader.h"
#include "TransparentWnd.h"
#include "DeskWndObserver.h"
#include <string>

//==============================================================================
class NewProjectApplication  
    : public JUCEApplication
{
public:
    //==============================================================================
    NewProjectApplication() {}

    const String getApplicationName()       { return ProjectInfo::projectName; }
    const String getApplicationVersion()    { return ProjectInfo::versionString; }
    bool moreThanOneInstanceAllowed()       { return true; }

    //==============================================================================
    void initialise (const String& commandLine)
    {
        LoadDtdData::getInstance()->parseDtdFile("strings.dtd");
        BookmarkFileIO::getInstance()->init("bookmarks.json");

        DeskWndObserver obsvr;
        obsvr.FindTargetWnd();
        obsvr.FindAccObj();
        RECT rct = obsvr.getFavirateRect();
        juce::Rectangle<int> wndPos(rct.left * 0.8f, rct.top * 0.8f, rct.right * 0.8f, rct.bottom * 0.8f);
        TCHAR szTitle[MAX_PATH] = {0};
        int len = obsvr.GetWindowTitle(szTitle);
        String title = String::fromUTF8(szTitle);
        wnd = new TransparentWnd(wndPos, title);
        wnd->addToDesktop(ComponentPeer::windowIsTemporary);
        wnd->setAlwaysOnTop(true);
        wnd->setVisible(true);
        // Add your application's initialisation code here..
    }

    void shutdown()
    {
        BookmarkFileIO::getInstance()->saveToFile();
        BookmarkFileIO::deleteInstance();
        LoadDtdData::deleteInstance();
        wnd = nullptr;
        // Add your application's shutdown code here..
    }

    //==============================================================================
    void systemRequestedQuit()
    {
        // This is called when the app is being asked to quit: you can ignore this
        // request and let the app carry on running, or call quit() to allow the app to close.
        quit();
    }

    void anotherInstanceStarted (const String& commandLine)
    {
        // When another instance of the app is launched while this one is running,
        // this method is invoked, and the commandLine parameter tells you what
        // the other instance's command-line arguments were.
    }

private:
    ScopedPointer<TransparentWnd> wnd;
};

//==============================================================================
// This macro generates the main() routine that launches the app.
START_JUCE_APPLICATION (NewProjectApplication)
